// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 고객 테이블
model User {
  id                          Int                           @id @default(autoincrement())
  email                       String                        @unique
  nickName                    String                        @unique
  password                    String?
  profileImage                String?
  deletedAt                   DateTime?
  updatedAt                   DateTime                      @updatedAt
  createdAt                   DateTime                      @default(now())
  // relations
  /// [고객 인증정보] User ---< UserIdentityVerification
  UserIdentityVerification    UserIdentityVerification[]
  /// [고객 약관동의정보] User ---< UserTermsOfServiceAgreement
  UserTermsOfServiceAgreement UserTermsOfServiceAgreement[]
  /// [고객 소셜연동정보] User ---< UserSocialAuthentication
  UserSocialAuthentication    UserSocialAuthentication[]

  // Index
  @@index([nickName], name: "nickName")
  @@index([email], name: "email")
}

/// 고객 인증정보 저장 테이블
model UserIdentityVerification {
  id               String               @id @default(cuid())
  userId           Int?
  verificationType UserVerificationType
  emailAddress     String?
  verificationCode String
  failCount        Int                  @default(0)
  verifiedAt       DateTime?
  updatedAt        DateTime             @updatedAt
  createdAt        DateTime             @default(now())
  // relations
  /// UserIdentityVerification >--- User
  User             User?                @relation(fields: [userId], references: [id])

  // index
  @@index([userId], name: "userId")
}

enum UserVerificationType {
  EMAIL
}

/// 약관정보
model TermsOfService {
  id                          Int                           @id @default(autoincrement())
  title                       String
  content                     String
  isEssential                 Boolean                       @default(true)
  deletedAt                   DateTime?
  updatedAt                   DateTime                      @updatedAt
  createdAt                   DateTime                      @default(now())
  /// relations
  /// TermsOfService ---< UserTermsOfServiceAgreement
  UserTermsOfServiceAgreement UserTermsOfServiceAgreement[]
}

/// 고객 약관동의 정보
model UserTermsOfServiceAgreement {
  id               String         @id @default(cuid())
  userId           Int
  termsOfServiceId Int
  deletedAt        DateTime?
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  // relations
  /// UserTermsOfServiceAgreement >--- User
  User             User           @relation(fields: [userId], references: [id])
  /// UserTermsOfServiceAgreement >--- TermsOfService
  TermsOfService   TermsOfService @relation(fields: [termsOfServiceId], references: [id])

  // index
  @@index([userId], name: "userId")
  @@index([termsOfServiceId], name: "termsOfServiceId")
  @@index([userId, termsOfServiceId], name: "userId_termsOfServiceId")
}

/// 고객 소셜연동정보
model UserSocialAuthentication {
  id        String                       @id @default(cuid())
  userId    Int
  type      UserSocialAuthenticationType
  key       String
  deletedAt DateTime?
  updatedAt DateTime                     @updatedAt
  createdAt DateTime                     @default(now())
  /// relations
  /// UserSocialAuthentication >--- User
  User      User                         @relation(fields: [userId], references: [id])

  // index
  @@index([userId], name: "userId")
  @@index([key, type], name: "key_type")
}

enum UserSocialAuthenticationType {
  GOOGLE
  APPLE
}
